{
    "google": "",
    "body": "Tabler.js\r\n========\r\n\r\nA lightweight library for building dynamic tables.\r\n\r\n## Usage\r\n\r\nTabler works as an AMD module or standalone\r\n\r\n### AMD\r\n\r\n    define(['lib/tabler/tabler', 'lib/tabler/tabler.sortable'], function(tabler, sortable){\r\n        // Your module code\r\n        var table = tabler.create(columns, {plugins: [sortable]});\r\n\r\n        table.load([..data..]);\r\n        table.render();\r\n\r\n        $(..el..).append(table.$el);\r\n        // More your module code\r\n    });\r\n\r\n### Standalone\r\n\r\nJust reference the scripts directly, ensuring any plugins are added *after* the tabler.js script itself.\r\n\r\nTabler will be available via the `tabler` global object.  The plugins will hang off `tabler.pluginName`.\r\n\r\n## Configuration\r\n\r\nConfiguration for the table iself is done through the specs passed to the `tabler.create()` method, a typical example:\r\n\r\n    var table = tabler.create([\r\n        {field: 'name', name: 'Name'},\r\n        {field: 'apples', name: '# Apples'},\r\n        {field: 'bananas', name: '# Bananas'}\r\n    ]);\r\n\r\n    table.load([\r\n        {name: 'Steve', apples: 2, bananas: 4},\r\n        {name: 'Graham', apples: 1, bananas: 6},\r\n        {name: 'Dan', apples: 9, bananas: 2},\r\n        {name: 'Jon', apples: 5, bananas: 6}\r\n    ]);\r\n    table.render();\r\n\r\nThe Default set of configuration parameters are:\r\n\r\n* id: A unique ID for the row, if not specified then one will be generated from either the `field` or `name` property (in that order).  If an ID is not unique, then an error will be thrown.\r\n* field: The field from each row to render\r\n* name: The title for the column that will appear in the header. If you do not specify a name attribute for any column then the table will not have any columns\r\n* formatter: A function(row, colSpec) that returns formatted data for the row (eg wrap each number in a link)\r\n* headerFormatter: A function(colSpec) that returns formatted data for the column header (eg wrapped in a link)\r\n* disabled: true/false whether the table should render the column at all\r\n\r\nPlugins may add support for additional parameters (see below)\r\n\r\n## Using Plugins\r\n\r\nSimply pass the plugins as the second parameter of the `create` method:\r\n\r\n    var table = tabler.create([..spec..], {plugins: [sortable]});\r\n\r\n    // table.pager and table.sortable are now available and automatically applied on the next call to `render`\r\n\r\nOr add plugins later on:\r\n\r\n    table.addPlugin(pager, {pageSize: 10, currentPage: 0})\r\n\r\nThe included plugins are also AMD modules and should be required in the same manner as the main module.\r\n\r\nAs you can see, plugin options cannot currently be specified when calling the create method.  You can set these after the fact instead (eg table.pager.options.pageSize or table.sortable.sorter)\r\n\r\n## Included Plugins\r\n\r\nTabler has a number of plugins that come out-of-the-box:\r\n\r\n### Aggregator\r\n\r\nAllows you to add an aggregator function on each column which can perform calculations, the function runs for each column of the data and runs a reduce-like function on it, displaying the final result in the footer of the table\r\n\r\n    function totaliser(memo, value){\r\n        return (memo || 0) + value;\r\n    }\r\n\r\n    var table = tabler.create([\r\n        {name: 'Apples', field: 'apples', aggregator: totaliser}\r\n    ]);\r\n    table.render();\r\n\r\n    // The Apples tfoot td now has the total of all apples cells\r\n\r\n### Column Grouper\r\n\r\nAllows you to group columns\r\n\r\n    var table = tabler.create([\r\n        {field: 'name', name: 'Name'},\r\n        {field: 'apples', name: '# Apples', columnGroup: 'Fruit'},\r\n        {field: 'bananas', name: '# Bananas', columnGroup: 'Fruit'}\r\n    ]);\r\n    table.render();\r\n\r\n    The table will now have a th spanning the second and third column with the content \"Fruit\"\r\n\r\n### Pager\r\n\r\nAdds a pager to the footer of the table, with next/prev/first/last links & client-side paging capabilities (by default)\r\n\r\n    table.addPlugin(pager, {\r\n        pageSize: 20,\r\n        currentPage: 1\r\n    });\r\n    table.render();\r\n\r\nOptions:\r\n\r\n* pageSize: The size of each page\r\n* currentPage: The current page index, 0-based\r\n* totalResults: The total number of results (useful for server-side paging)\r\n* pager: [optional] function(data, pageOptions, callback) that can be passed in to perform server-side paging (run the callback when done)\r\n\r\n### PageSize\r\n\r\nAdds a simple page size dropdown to the pager footer row (requires pager plugin)\r\n\r\n    table.addPlugin(pageSize, {sizes: [10, 25, 50]});\r\n\r\nIf the `sizes` option is not passed in, then a default set of sizes of [20, 50, 100] is used\r\n\r\n### Sortable\r\n\r\nAdds anchors to designated column headers, making them sortable on click\r\n\r\n    var table = tabler.create([\r\n        {field: 'name', name: 'Name'},\r\n        {field: 'apples', name: '# Apples', columnGroup: 'Fruit', sortable: true},\r\n        {field: 'bananas', name: '# Bananas', columnGroup: 'Fruit', sortable: true}\r\n    ]);\r\n\r\nOptions:\r\n\r\n* sorter: function(data, field, dir, callback) that can perform server-side sorting (run the callback when done)\r\n\r\n### toggleColumns\r\n\r\nThis adds a \"Columns\" button into the table header, which when clicked allows the user to choose which columns to show/hide.\r\n\r\nInternally, hiding a column is the same as setting `disabled: true` on it. Columns can be opted out of being toggleable by setting `toggleable: false` on the spec.\r\n\r\n### jumpToPage\r\n\r\nUsed in conjunction with the pager plugin, adds a \"Jump to page\" input box into the pager row, which allows the user to jump directly to a specific page of results.\r\n\r\n### removeColumns\r\n\r\nAdds an \"x\" link to each toggleable column header and column group, which disables the column when clicked\r\n",
    "note": "Don't delete this file! It's used internally to help with page regeneration.",
    "tagline": "Client-side table generation",
    "name": "Tabler"
}